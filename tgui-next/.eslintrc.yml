parser: babel-eslint
parserOptions:
  ecmaVersion: 2019
  sourceType: module
  ecmaFeatures:
    jsx: true
env:
  browser: true
  node: true
plugins:
  - react
settings:
  react:
    version: '16.10'
rules:

  ## Possible Errors
  ## ----------------------------------------
  # for-direction: error
  # getter-return: error
  no-async-promise-executor: error
  # no-await-in-loop: error
  # no-compare-neg-zero: error
  no-cond-assign: error
  # no-console: error
  # no-constant-condition: error
  # no-control-regex: error
  # no-debugger: error
  no-dupe-args: error
  no-dupe-keys: error
  no-duplicate-case: error
  # no-empty: error
  no-empty-character-class: error
  no-ex-assign: error
  no-extra-boolean-cast: error
  # no-extra-parens: warn
  no-extra-semi: error
  no-func-assign: error
  no-import-assign: error
  no-inner-declarations: error
  no-invalid-regexp: error
  no-irregular-whitespace: error
  no-misleading-character-class: error
  no-obj-calls: error
  no-prototype-builtins: error
  no-regex-spaces: error
  no-sparse-arrays: error
  no-template-curly-in-string: error
  no-unexpected-multiline: error
  # no-unreachable: warn
  no-unsafe-finally: error
  no-unsafe-negation: error
  # require-atomic-updates: error
  use-isnan: error
  valid-typeof: error

  ## Best practices
  ## ----------------------------------------
  complexity: [error, { max: 50 }] ## That is a VERY generous limit
  curly: [error, all]
  eqeqeq: [error, always]
  dot-location: [error, property]
  no-empty-pattern: error
  no-multi-spaces: warn
  no-octal: error
  no-octal-escape: error
  no-return-assign: error
  no-self-assign: error
  no-sequences: error
  no-unused-labels: warn
  no-useless-escape: warn
  no-with: error
  radix: error

  ## Code style
  ## ----------------------------------------
  array-bracket-newline: [error, consistent]
  array-bracket-spacing: [error, never]
  block-spacing: [error, always]
  # brace-style: [error, stroustrup, { allowSingleLine: false }]
  comma-dangle: [error, always-multiline]
  comma-spacing: [error, { before: false, after: true }]
  comma-style: [error, last]
  computed-property-spacing: [error, never]
  func-call-spacing: [error, never]
  func-style: [error, expression]
  ## This rule does not honor a newline on opening paren.
  # function-paren-newline: [error, never]
  indent: [error, 2, {
    SwitchCase: 1,
  }]
  jsx-quotes: [error, prefer-double]
  key-spacing: [error, { beforeColon: false, afterColon: true }]
  keyword-spacing: [error, { before: true, after: true }]
  max-len: [error, { code: 120 }]
  multiline-ternary: [error, always-multiline]
  no-mixed-spaces-and-tabs: error
  no-whitespace-before-property: error
  operator-linebreak: [error, before]
  # quotes: [error, single]
  semi: error
  semi-spacing: [error, { before: false, after: true }]
  semi-style: [error, last]
  space-before-blocks: [error, always]
  space-before-function-paren: [error, {
    anonymous: always,
    named: never,
    asyncArrow: always,
  }]
  space-in-parens: [error, never]
  spaced-comment: [error, always]
  switch-colon-spacing: [error, { before: false, after: true }]
  template-tag-spacing: [error, never]
  # unicode-bom: [error, never]

  ## ES6
  ## ----------------------------------------
  arrow-parens: [error, as-needed]
  arrow-spacing: [error, { before: true, after: true }]
  generator-star-spacing: [error, { before: false, after: true }]
  no-class-assign: error
  no-const-assign: error
  no-dupe-class-members: error
  no-new-symbol: error
  no-this-before-super: error
  no-var: error
  prefer-arrow-callback: error
  yield-star-spacing: [error, { before: false, after: true }]

  ## React
  ## ----------------------------------------
  ## Enforces consistent naming for boolean props
  react/boolean-prop-naming: error
  ## Forbid "button" element without an explicit "type" attribute
  react/button-has-type: error
  ## Prevent extraneous defaultProps on components
  react/default-props-match-prop-types: error
  ## Rule enforces consistent usage of destructuring assignment in component
  react/destructuring-assignment: [error, always, { ignoreClassFields: true }]
  ## Prevent missing displayName in a React component definition
  react/display-name: error
  ## Forbid certain props on Components
  # react/forbid-component-props: error
  ## Forbid certain props on DOM Nodes
  # react/forbid-dom-props: error
  ## Forbid certain elements
  # react/forbid-elements: error
  ## Forbid certain propTypes
  # react/forbid-prop-types: error
  ## Forbid foreign propTypes
  # react/forbid-foreign-prop-types: error
  ## Prevent using this.state inside this.setState
  react/no-access-state-in-setstate: error
  ## Prevent using Array index in key props
  # react/no-array-index-key: error
  ## Prevent passing children as props
  react/no-children-prop: error
  ## Prevent usage of dangerous JSX properties
  react/no-danger: error
  ## Prevent problem with children and props.dangerouslySetInnerHTML
  react/no-danger-with-children: error
  ## Prevent usage of deprecated methods, including component lifecycle methods
  react/no-deprecated: error
  ## Prevent usage of setState in componentDidMount
  react/no-did-mount-set-state: error
  ## <<<<<
  ## Prevent usage of setState in componentDidUpdate
  react/no-did-update-set-state: error
  ## Prevent direct mutation of this.state
  react/no-direct-mutation-state: error
  ## Prevent usage of findDOMNode
  react/no-find-dom-node: error
  ## Prevent usage of isMounted
  react/no-is-mounted: error
  ## Prevent multiple component definition per file
  # react/no-multi-comp: error
  ## Prevent usage of shouldComponentUpdate when extending React.PureComponent
  react/no-redundant-should-component-update: error
  ## Prevent usage of the return value of React.render
  react/no-render-return-value: error
  ## Prevent usage of setState
  # react/no-set-state: error
  ## Prevent common casing typos
  react/no-typos: error
  ## Prevent using string references in ref attribute.
  react/no-string-refs: error
  ## Prevent using this in stateless functional components
  react/no-this-in-sfc: error
  ## Prevent invalid characters from appearing in markup
  react/no-unescaped-entities: error
  ## Prevent usage of unknown DOM property (fixable)
  react/no-unknown-property: error
  ## Prevent usage of unsafe lifecycle methods
  react/no-unsafe: error
  ## Prevent definitions of unused prop types
  react/no-unused-prop-types: error
  ## Prevent definitions of unused state properties
  react/no-unused-state: error
  ## Prevent usage of setState in componentWillUpdate
  react/no-will-update-set-state: error
  ## Enforce ES5 or ES6 class for React Components
  react/prefer-es6-class: error
  ## Enforce that props are read-only
  react/prefer-read-only-props: error
  ## Enforce stateless React Components to be written as a pure function
  react/prefer-stateless-function: error
  ## Prevent missing props validation in a React component definition
  # react/prop-types: error
  ## Prevent missing React when using JSX
  # react/react-in-jsx-scope: error
  ## Enforce a defaultProps definition for every prop that is not a required prop
  # react/require-default-props: error
  ## Enforce React components to have a shouldComponentUpdate method
  # react/require-optimization: error
  ## Enforce ES5 or ES6 class for returning value in render function
  react/require-render-return: error
  ## Prevent extra closing tags for components without children (fixable)
  react/self-closing-comp: error
  ## Enforce component methods order (fixable)
  # react/sort-comp: error
  ## Enforce propTypes declarations alphabetical sorting
  # react/sort-prop-types: error
  ## Enforce the state initialization style to be either in a constructor or with a class property
  react/state-in-constructor: error
  ## Enforces where React component static properties should be positioned.
  # react/static-property-placement: error
  ## Enforce style prop value being an object
  react/style-prop-object: error
  ## Prevent void DOM elements (e.g. <img />, <br />) from receiving children
  react/void-dom-elements-no-children: error

  ## JSX-specific rules
  ## ----------------------------------------
  ## Enforce boolean attributes notation in JSX (fixable)
  react/jsx-boolean-value: error
  ## Enforce or disallow spaces inside of curly braces in JSX attributes and expressions.
  # react/jsx-child-element-spacing: error
  ## Validate closing bracket location in JSX (fixable)
  ## NOTE: Too fucking annoying because all styles are viable
  # react/jsx-closing-bracket-location: [error, {
  #   selfClosing: after-props,
  #   nonEmpty: after-props,
  # }]
  ## Validate closing tag location in JSX (fixable)
  react/jsx-closing-tag-location: error
  ## Enforce or disallow newlines inside of curly braces in JSX attributes and expressions (fixable)
  react/jsx-curly-newline: error
  ## Enforce or disallow spaces inside of curly braces in JSX attributes and expressions (fixable)
  react/jsx-curly-spacing: error
  ## Enforce or disallow spaces around equal signs in JSX attributes (fixable)
  react/jsx-equals-spacing: error
  ## Restrict file extensions that may contain JSX
  # react/jsx-filename-extension: error
  ## Enforce position of the first prop in JSX (fixable)
  # react/jsx-first-prop-new-line: error
  ## Enforce event handler naming conventions in JSX
  react/jsx-handler-names: error
  ## Validate JSX indentation (fixable)
  react/jsx-indent: [error, 2]
  ## Validate props indentation in JSX (fixable)
  react/jsx-indent-props: [error, 2]
  ## Validate JSX has key prop when in array or iterator
  react/jsx-key: error
  ## Validate JSX maximum depth
  react/jsx-max-depth: [error, { max: 6 }] ## Generous
  ## Limit maximum of props on a single line in JSX (fixable)
  # react/jsx-max-props-per-line: error
  ## Prevent usage of .bind() and arrow functions in JSX props
  # react/jsx-no-bind: error
  ## Prevent comments from being inserted as text nodes
  react/jsx-no-comment-textnodes: error
  ## Prevent duplicate props in JSX
  react/jsx-no-duplicate-props: error
  ## Prevent usage of unwrapped JSX strings
  # react/jsx-no-literals: error
  ## Prevent usage of unsafe target='_blank'
  react/jsx-no-target-blank: error
  ## Disallow undeclared variables in JSX
  react/jsx-no-undef: error
  ## Disallow unnecessary fragments (fixable)
  react/jsx-no-useless-fragment: error
  ## Limit to one expression per line in JSX
  # react/jsx-one-expression-per-line: error
  ## Enforce curly braces or disallow unnecessary curly braces in JSX
  # react/jsx-curly-brace-presence: error
  ## Enforce shorthand or standard form for React fragments
  react/jsx-fragments: error
  ## Enforce PascalCase for user-defined JSX components
  react/jsx-pascal-case: error
  ## Disallow multiple spaces between inline JSX props (fixable)
  react/jsx-props-no-multi-spaces: error
  ## Disallow JSX props spreading
  # react/jsx-props-no-spreading: error
  ## Enforce default props alphabetical sorting
  # react/jsx-sort-default-props: error
  ## Enforce props alphabetical sorting (fixable)
  # react/jsx-sort-props: error
  ## Validate whitespace in and around the JSX opening and closing brackets (fixable)
  react/jsx-tag-spacing: error
  ## Prevent React to be incorrectly marked as unused
  react/jsx-uses-react: error
  ## Prevent variables used in JSX to be incorrectly marked as unused
  react/jsx-uses-vars: error
  ## Prevent missing parentheses around multilines JSX (fixable)
  react/jsx-wrap-multilines: error
