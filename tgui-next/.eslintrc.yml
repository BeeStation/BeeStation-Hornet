parser: babel-eslint
parserOptions:
  ecmaVersion: 2019
  sourceType: module
  ecmaFeatures:
    jsx: true
env:
  browser: true
  node: true
rules:
  ## Possible Errors
  # for-direction: error
  # getter-return: error
  no-async-promise-executor: error
  # no-await-in-loop: error
  # no-compare-neg-zero: error
  no-cond-assign: error
  # no-console: error
  # no-constant-condition: error
  # no-control-regex: error
  # no-debugger: error
  no-dupe-args: error
  no-dupe-keys: error
  no-duplicate-case: error
  # no-empty: error
  no-empty-character-class: error
  no-ex-assign: error
  no-extra-boolean-cast: error
  # no-extra-parens: warn
  no-extra-semi: error
  no-func-assign: error
  no-import-assign: error
  no-inner-declarations: error
  no-invalid-regexp: error
  no-irregular-whitespace: error
  no-misleading-character-class: error
  no-obj-calls: error
  no-prototype-builtins: error
  no-regex-spaces: error
  no-sparse-arrays: error
  no-template-curly-in-string: error
  no-unexpected-multiline: error
  # no-unreachable: warn
  no-unsafe-finally: error
  no-unsafe-negation: error
  # require-atomic-updates: error
  use-isnan: error
  valid-typeof: error

  ## Best practices
  complexity: [error, { max: 50 }] ## That is a VERY generous limit
  curly: [error, all]
  eqeqeq: [error, always]
  dot-location: [error, property]
  no-empty-pattern: error
  no-multi-spaces: warn
  no-octal: error
  no-octal-escape: error
  no-return-assign: error
  no-self-assign: error
  no-sequences: error
  no-unused-labels: warn
  no-useless-escape: warn
  no-with: error
  radix: error

  ## Code style
  array-bracket-newline: [error, consistent]
  array-bracket-spacing: [error, never]
  block-spacing: [error, always]
  brace-style: [error, stroustrup, { allowSingleLine: false }]
  comma-dangle: [error, always-multiline]
  comma-spacing: [error, { before: false, after: true }]
  comma-style: [error, last]
  computed-property-spacing: [error, never]
  func-call-spacing: [error, never]
  func-style: [error, expression]
  ## This rule does not honor a newline on opening paren.
  # function-paren-newline: [error, never]
  indent: [error, 2, {
    SwitchCase: 1,
  }]
  jsx-quotes: [error, prefer-double]
  key-spacing: [error, { beforeColon: false, afterColon: true }]
  keyword-spacing: [error, { before: true, after: true }]
  max-len: [error, { code: 120 }]
  multiline-ternary: [error, always-multiline]
  no-mixed-spaces-and-tabs: error
  no-whitespace-before-property: error
  operator-linebreak: [error, before]
  # quotes: [error, single]
  semi: error
  semi-spacing: [error, { before: false, after: true }]
  semi-style: [error, last]
  space-before-blocks: [error, always]
  space-before-function-paren: [error, {
    anonymous: always,
    named: never,
    asyncArrow: always,
  }]
  space-in-parens: [error, never]
  spaced-comment: [error, always]
  switch-colon-spacing: [error, { before: false, after: true }]
  template-tag-spacing: [error, never]
  # unicode-bom: [error, never]

  ## ES6
  arrow-parens: [error, as-needed]
  arrow-spacing: [error, { before: true, after: true }]
  generator-star-spacing: [error, { before: false, after: true }]
  no-class-assign: error
  no-const-assign: error
  no-dupe-class-members: error
  no-new-symbol: error
  no-this-before-super: error
  no-var: error
  prefer-arrow-callback: error
  yield-star-spacing: [error, { before: false, after: true }]
