@mixin button-color($color) {
  transition: color, background-color 50ms;
  background-color: $color;

  // Adapt button color to background luminance to ensure high contast
  @if luminance($color) > 0.4 {
    color: rgba(0, 0, 0, 1);
  }
  @else {
    color: rgba(255, 255, 255, 1);
  }

  &:hover {
    transition: color, background-color 0ms;
  }

  &:focus {
    transition: color, background-color 100ms;
  }

  &:hover,
  &:focus {
    background-color: lighten($color, $button-lighten-hover);
    @if luminance($color) > 0.4 {
      color: rgba(0, 0, 0, 1);
    }
    @else {
      color: rgba(255, 255, 255, 1);
    }
  }
}

.Button {
  position: relative;
  display: inline-block;
  line-height: 19px;
  padding: 0 6px;
  margin-right: 2px;
  white-space: nowrap;
  outline: 0;
  margin-bottom: 2px;
  // Disable selection in buttons
  user-select: none;
  -ms-user-select: none;

  &:last-child {
    margin-right: 0;
  }
}

.Button--hasContent {
  // Add a margin to the icon to keep it separate from the text
  .fa, .fas, .far {
    margin-right: 6px;
  }
}

.Button--fluid {
  display: block;
  margin-left: 0;
  margin-right: 0;
  // padding: 3px 6px;
}

@each $color-name, $color-value in $color-map {
  .Button--color--#{$color-name} {
    @include button-color($color-value);
  }
}

.Button--color--normal {
  @include button-color($button-color-normal);
}

.Button--color--caution {
  @include button-color($button-color-caution);
}

.Button--color--danger {
  @include button-color($button-color-danger);
}

.Button--color--transparent {
  @include button-color($dark-gray);
  background-color: rgba($dark-gray, 0);
  color: rgba(255, 255, 255, 0.5);
}

.Button--disabled {
  background-color: $button-color-disabled !important;
}

.Button--selected {
  @include button-color($button-color-selected);
}
