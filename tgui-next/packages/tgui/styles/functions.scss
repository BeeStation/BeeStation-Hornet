/**
 * Copyright (c) 2018 Aleksej Komarov
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

//  Type-casting
// --------------------------------------------------------

// Get a unit-less numeric value
@function num($value) {
  @if type-of($value) != number {
    @error 'Could not convert `#{$value}` - must be `type-of number`';
    @return null;
  }
  @if unit($value) == '%' {
    @return $value / 100%;
  }
  @return $value / ($value * 0 + 1);
}


//  Color
// --------------------------------------------------------

// Increases the lightness component of the color relative to
// its current lightness.
@function lighten($color, $percent) {
  @return hsl(
    hue($color),
    saturation($color),
    lightness($color) * (1 + num($percent)));
}

// Decreases the lightness component of the color relative to
// its current lightness.
@function darken($color, $percent) {
  @return hsl(
    hue($color),
    saturation($color),
    lightness($color) * (1 - num($percent)));
}

// Returns the NTSC luminance of `$color` as a float (between 0 and 1).
// 1 is pure white, 0 is pure black.
@function luminance($color) {
  $colors: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color)
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: $value / 255;
    @if $value < 0.03928 {
      $value: $value / 12.92;
    }
    @else {
      $value: ($value + .055) / 1.055;
      $value: math-pow($value, 2.4);
    }
    $colors: map-merge($colors, ($name: $value));
  }

  @return (map-get($colors, 'red') * .2126)
    + (map-get($colors, 'green') * .7152)
    + (map-get($colors, 'blue') * .0722);
}


//  Power function polyfill
// --------------------------------------------------------

@function math-pow($number, $exp) {
  @if (round($exp) != $exp) {
    @return math-exp($exp * math-ln($number));
  }
  // Traditional method for integers
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function math-factorial($value) {
  @if $value == 0 {
    @return 1;
  }
  $result: 1;
  @for $index from 1 through $value {
    $result: $result * $index;
  }
  @return $result;
}

@function math-summation($iteratee, $input, $initial: 0, $limit: 100) {
  $sum: 0;
  @for $index from $initial to $limit {
    $sum: $sum + call(get-function($iteratee), $input, $index);
  }
  @return $sum;
}

@function math-exp-maclaurin($x, $n) {
  $result: math-pow($x, $n) / math-factorial($n);
  @return $result;
}

@function math-exp($value) {
  $result: math-summation(math-exp-maclaurin, $value, 0, 100);
  @return $result;
}

@function math-ln-maclaurin($x, $n) {
  $result: (math-pow(-1, $n + 1) / $n) * (math-pow($x - 1, $n));
  @return $result;
}

@function math-ln($value) {
  $ten-exp: 1;
  $ln-ten: 2.30258509;
  @while ($value > math-pow(10, $ten-exp)) {
    $ten-exp: $ten-exp + 1;
  }
  $value: $value / math-pow(10, $ten-exp);
  $result: math-summation(math-ln-maclaurin, $value, 1, 100);
  @return $result + $ten-exp * $ln-ten;
}
